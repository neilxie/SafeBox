package com.max.security.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.max.security.greendao.FileModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FILE_MODEL.
*/
public class FileModelDao extends AbstractDao<FileModel, String> {

    public static final String TABLENAME = "FILE_MODEL";

    /**
     * Properties of entity FileModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property FileName = new Property(1, String.class, "FileName", false, "FILE_NAME");
        public final static Property FilePath = new Property(2, String.class, "FilePath", false, "FILE_PATH");
        public final static Property OriginPath = new Property(3, String.class, "OriginPath", false, "ORIGIN_PATH");
        public final static Property FileType = new Property(4, int.class, "FileModelType", false, "FILE_TYPE");
        public final static Property CreateTime = new Property(5, long.class, "CreateTime", false, "CREATE_TIME");
    };


    public FileModelDao(DaoConfig config) {
        super(config);
    }
    
    public FileModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FILE_MODEL' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "'FILE_NAME' TEXT NOT NULL ," + // 1: FileName
                "'FILE_PATH' TEXT NOT NULL ," + // 2: FilePath
                "'ORIGIN_PATH' TEXT NOT NULL ," + // 3: OriginPath
                "'FILE_TYPE' INTEGER NOT NULL ," + // 4: FileModelType
                "'CREATE_TIME' INTEGER NOT NULL );"); // 5: CreateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FILE_MODEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FileModel entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getFileName());
        stmt.bindString(3, entity.getFilePath());
        stmt.bindString(4, entity.getOriginPath());
        stmt.bindLong(5, entity.getFileType());
        stmt.bindLong(6, entity.getCreateTime());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FileModel readEntity(Cursor cursor, int offset) {
        FileModel entity = new FileModel( //
            cursor.getString(offset + 0), // Id
            cursor.getString(offset + 1), // FileName
            cursor.getString(offset + 2), // FilePath
            cursor.getString(offset + 3), // OriginPath
            cursor.getInt(offset + 4), // FileModelType
            cursor.getLong(offset + 5) // CreateTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FileModel entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setFileName(cursor.getString(offset + 1));
        entity.setFilePath(cursor.getString(offset + 2));
        entity.setOriginPath(cursor.getString(offset + 3));
        entity.setFileType(cursor.getInt(offset + 4));
        entity.setCreateTime(cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(FileModel entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(FileModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
